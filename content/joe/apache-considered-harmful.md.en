Status: verified=19777
Title: Apache HTTPd Devs Considered Harmful
Dependencies: *.md.en
Categories: Apache, Perl
Keywords: apache,httpd,mod_apreq2,libapreq2,mod_perl
Important: commentAA

<div class="right">

![tarred and feathered](apache-considered-harmful.page/feather.png)

</div>

## Background

For the past 25 years, I have been the lead developer of the `apreq` subproject within the [Apache HTTPd Server](https://httpd.apache.org) Parent Project. The original idea of `libapreq`, as a safe/performant [HTML form submission](https://www.w3.org/TR/2014/REC-html5-20141028/forms.html) and [Cookie](https://datatracker.ietf.org/doc/html/rfc6265) parsing library, came out of a collaboration between Lincoln Stein and Doug MacEachern in the late 90s.

It was my vision back then to transform the library into a generic, non-Perl related `C` library that would support language bindings from other programming languages, which is why I pushed for the project to be [homed](https://httpd.apache.org/apreq) under the HTTPd umbrella instead of the [Apache-Perl](https://perl.apache.org/) project.

With the advent of `httpd-2.X`, an entirely new `I/O Filter` architecture emerged from `httpd` core, as well as the complete separation of `APR` from the core itself as a more general purpose POSIX-like portability runtime for `C` projects like `Subversion`. In fact, `libapreq2` is more closely aliged with the `Apache APR` project in that spirit, and its Perl API reflects that as part of its `APR::Request` buildout.  It has a built-in *CGI* mode for standalone operation, outside of the `httpd` runtime, which makes unit testing a breeze.

Yet the key component of `apreq2` has always been the `mod_apreq2` Apache module, which was first conceived by `Bill Wrowe` in the early 2000s.  What he designed, during a brainstorming session with me (in person), was a single parser library internal to `httpd`, that **shared** the submitted request *body* with every key stakeholder module in the runtime.  That meant providing parsed data to modules hooked into the request processing engine *before*, *during*, and *after* the content handler runs. And it needed to work for subrequests as well, regardless of whether or not the content handler consumed the parsed data, or consumed and reparsed the raw request body itself.

I explained the design goals several times over the years, even in 2012 on [dev@httpd](https://lists.apache.org/list.html?dev@httpd.apache.org:2012-04). But it was always like talking to the wind with these guys; they just never cared.

## Storm Clouds Gathering

While this vision was wildly successful, with language bindings available for several languages like [`Perl`](https://perl.apache.org/), [`PHP`](https://github.com/php/php-src/blob/master/main/rfc1867.c),  [`TCL`](https://tcl.apache.org/), [`R`](https://github.com/jeffreyhorner/rapache), etc., ever since about 2010 it has proven tragic for the [existing user community](https://webtechsurvey.com/technology/smod_apreq2) <a href="#commentAA" class="border border-warning text-muted reference-link" id="commentAA-link" title="{{commentAA.headers.title}}">consisting of all of them</a>, not just the members of the `Perl` community.

What happened? [Philip Gollucci](https://projects.apache.org/committee.html?httpd#:~:text=Philip%20M.%20Gollucci), a Perl/FreeBSD colleague of mine at the time, started agitating that we promote the project to be released from inside the HTTPd server itself. What {# lede #}Philip didn't know very well back then was how utterly [peevish, vapid, and territorial](https://www.mail-archive.com/dev@httpd.apache.org/msg77781.html) that team had become{# lede #}, which would have meant having to collaborate with them directly on [user-facing decisions](https://www.mail-archive.com/dev@httpd.apache.org/msg77806.html) about the code base.

In 2012, Philip got what he wanted and I stopped resisting, so he [forked](https://svn.apache.org/viewvc?view=revision&revision=1201372) the existing project and copied the `C` library components into HTTPd core.

## Fallout

[In 2018](https://www.mail-archive.com/search?l=modperl@perl.apache.org&q=subject:%22Re%5C%3A+New+release+of+libapreq2%22&o=newest&f=1) I resigned from the Foundation en masse. You can guess the reasons.

In 2020 or so, Google's Security Team took advantage of an alpha release of httpd 2.5 by fuzzing its 8 year old copy of `apreq2`. They found a few hotspots that needed repair.

Instead of having the courtesy of reaching out to  Philip, [Issac Goldstand](https://projects.apache.org/committee.html?httpd#:~:text=Issac%20Goldstand), [Max Kellermann](https://projects.apache.org/committee.html?httpd#:~:text=Max%20Kellermann) (@MaxKellermann), myself (@joesuf4), or anyone else involved in the development of `libapreq2`, a junior engineer on the HTTPd team went about the business of "bug fixing" the vulnerabilities Google found. You can see a record of his trial and error work in every release since then.

But the coup de grace was the 2022 release of [2.17](https://www.google.com/search?q=libapreq2-2.17), wherein the rookie developer [purposely introduced a fatal bug into the codebase](http://svn.apache.org/viewvc?view=revision&revision=1895107), breaking [a nineteen year old regression test](http://svn.apache.org/viewvc/httpd/apreq/trunk/library/t/parsers.c?r1=161816&r2=164254&pathrev=1895107).

## Postmortem

If you are wondering how something with a broken regression test winds up on [CPAN](https://cpan-digger.perlmaven.com/dist/libapreq2), you'll have to look into how [RELENG](https://httpd.apache.org/dev/release.html) is done in the server project.

Long story short, [they commented out the test](http://svn.apache.org/viewvc?view=revision&revision=1903489) and shipped it anyway, and called it a Security Release that [fixed a vulnerability every prior release was susceptible to](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1018191).

<div class="right">

![Superman Logo](apache-considered-harmful.page/superman.jpg)

</div>

Why do I care now? Because I'm the sucker [users reach out to for answers](https://www.mail-archive.com/dev@httpd.apache.org/msg77426.html) as a known subject matter expert.

This sucks, but I'm sorry to tell you that my days wearing the Superman cape at Apache ended about a decade ago.

<!-- $Date$ $Author$ $Revision$ -->
